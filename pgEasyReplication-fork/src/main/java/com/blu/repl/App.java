package com.blu.repl;

import com.dg.easyReplication.Event;
import com.dg.easyReplication.PGEasyReplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import tech.allegro.schema.json2avro.converter.JsonAvroConverter;

import java.util.LinkedList;


/**
 * [Snapshot Data]: {"snapshot":{"relationName":"public.cidade","tupleData":[{"codigo":1,"data_fund":"1554-01-25","nome":"SAO PAULO"}, {"codigo":2,"data_fund":"1960-04-21","nome":"BRASILIA"}, {"codigo":3,"data_fund":"1565-03-01","nome":"RIO DE JANEIRO"}, {"codigo":4,"data_fund":"1554-01-25","nome":"SAO PAULO1"}, {"codigo":5,"data_fund":"1960-04-21","nome":"BRASILIA1"}, {"codigo":6,"data_fund":"1565-03-01","nome":"RIO DE JANEIRO2"}, {"codigo":7,"data_fund":"1554-01-25","nome":"SAO PAULO1"}, {"codigo":8,"data_fund":"1960-04-21","nome":"BRASILIA1"}, {"codigo":9,"data_fund":"1565-03-01","nome":"RIO DE JANEIRO2"}, {"codigo":10,"data_fund":"1554-01-25","nome":"SAO PAULO1"}, {"codigo":11,"data_fund":"1960-04-21","nome":"BRASILIA1"}, {"codigo":12,"data_fund":"1565-03-01","nome":"RIO DE JANEIRO2"}, {"codigo":13,"data_fund":"1554-01-25","nome":"SAO PAULO1"}, {"codigo":14,"data_fund":"1554-01-25","nome":"SAO PAULO1"}]}}
 * [CDC event]: {"tupleData":{"codigo":15,"nome":"SAO PAULO1","data_fund":"1554-01-25"},"relationName":"public.cidade","type":"insert"}
 * [Avro]: public.cidadeinsert SAO PAULO51554-01-25
 * */
public class App {
    private static final String server = "192.168.1.124:5432";		// PostgreSQL server (host:port)
    private static final String database = "shamim"; 			// PostgreSQL database
    private static final String user = "shamim"; 			// PostgreSQL username
    private static final String password = "shamim"; 				// PostgreSQL password
    private static final String publication = "cidade_pub"; 		// PostgreSQL publication name
    //private static final String slot = "slot_teste_cidade_pub"; 		// PostgreSQL slot name (OPTIONAL, DEFAULT "easy_slot_" + publication name)

    private static final Logger logger = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) {

        logger.info("Test PostgreSQL Logical replication!! CDC.");
        // instate the PGEasyReplication class
        PGEasyReplication easyReplication = new PGEasyReplication(server, database, user, password, publication);

        // get the snapshots
        Event snapshots = easyReplication.getSnapshot();
        LinkedList<String> eventSnapshots = snapshots.getData();
        //print snapshot data
        for (String data : eventSnapshots){
            logger.info("[Snapshot Data]: "+ data);
        }

        // Capture the changed data

        boolean slotDropIfExists = true;		// Drop slot if exists (OPTIONAL, DEFAULT false)

        easyReplication.initializeLogicalReplication(slotDropIfExists);

        boolean isSimpleEvent = true;			// Simple JSON data change (DEFAULT is true). Set false to return details like xid, xCommitTime, numColumns, TupleType, LSN, etc.
        boolean withBeginCommit = false; 		// Include BEGIN and COMMIT events (DEFAULT is false).
        String outputFormat = "application/json"; 	// Mime type output format (DEFAULT is "application/json"). Until now, JSON is the only available option.
        Long startLSN = null; 				// Start LSN (DEFAULT is null). If null, get all the changes pending.

        // avro schema generated by hand, tutorial link https://help.lenses.io/sql/streaming/json-to-avro/
        // avro schema validation tool http://avro.tarantool.org/#

        while (true) {
            Event cdc = easyReplication.readEvent(isSimpleEvent, withBeginCommit, outputFormat, startLSN);

            LinkedList<String> cdcEvent = cdc.getData();

            for (String data: cdcEvent){
                logger.info("[CDC event]: "+ data);
                // convert to AVRO
//                JsonAvroConverter jsonAvroConverter = new JsonAvroConverter();
//                byte[] avro = jsonAvroConverter.convertToAvro(data.getBytes(), avroSchema);
//                System.out.println("[Avro]: "+ new String(avro));
            }

        }



    }
}
